Golang Vs. Java
CS 430
10 Apr 2017

Nathanael Hardy

* Overview

- Goroutines
- Channels
- Buffered Channels
- WaitGroups
- Worker Pools
- Demo

* Golang Vs. Java

- Built with concurrency in mind
- Concurrency is easy, safe and simple
- Go is less feature rich and gives less control (for better or worse)
- Compiled to machine code and executed directly making it faster 


* The Goroutine Vs. Java System Thread

*Go*
- Lightweight 'thread'
- Go handles multiplexing and blocking
- Inexpensive to create and destroy
- Only expense of spawning is allocation of stack space

*Java*
- Mapped to OS Thread
- Expensive to create and destroy
- Must request OS level resources


* Server Example
- Retrieve data from server
- Each call does not rely on data from the previous callback
- Speed is of essence 

* Server code written in Java
.code codeExamples/main.java /START1 OMIT/,/END1 OMIT/
.code codeExamples/main.java /START2 OMIT/,/END2 OMIT/

* Server code written in Go
.code codeExamples/main.go /START1 OMIT/,/END1 OMIT/
.code codeExamples/main.go /START2 OMIT/,/END2 OMIT/


* Channels And Java BlockingQueue (Synchronous Queue Implementation)
- Like a pizza delivery
- A synchronization point
- Synchronous Queue must use put() and take()
- Statically typed
- Buffer size of 0
- Methods are implemented atomically
- Java does not implement a select statement
- Synchronous Queue can use FIFO fairness, channels cannot
	c := make(chan string)


* Buffered Channels
- More closely resembles a ArrayBlockingQueue 
- Created with a buffer size
- Will block when putting onto channel if exceeds buffer size

	JackieChan := make(chan int, 2)

* WaitGroups
- Similar to a countdown latch
- Used to ensure all processes are finished before moving forward
Add to the wait group

	wg.Add(1)

Remove from the wait group

	wg.Done()

Blocking operation

	wg.Wait()

* Worker Pools
- Uses Goroutines and Channels
- Similar to a Thread Pool
- Create a set amount of Goroutines and reuse
- Entirely different use case
- Enhanced error handling
- Clean and readable code
- Deterministic use of routines
- Possibility of more specific scheduling handled by the worker

* Kids at the super market - A worker pool solution

* Kids at the super market - The Worker
.code codeExamples/shoppingList.go /START1 OMIT/,/END1 OMIT/

* Kids at the super market - Worker Pool
.play codeExamples/shoppingList.go /START2 OMIT/,/END2 OMIT/

* Observations
- Simpler to create a concurrent solution
- Easy to build a solution that expands with grace
- Less headaches and less worry
- Less control and less options


* Questions?
